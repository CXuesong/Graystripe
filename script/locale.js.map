{"version":3,"sources":["script/locale.ts"],"names":[],"mappings":";;;IAUA;QACI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF,CAAC;;IAED,6BAAoC,WAAmB;QACnD,IAAI,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAC1B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;;IAED,8BAAqC,WAAmB;QACpD,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC;IAClD,CAAC;;IAOD,2BAAkC,CAAS,EAAE,CAAS;QAClD,MAAM,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC;;IAED,yBAAgC,CAAS,EAAE,IAAc;QACrD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;;;;;;;;;;QACD,CAAC","file":"locale.js","sourcesContent":["/// <reference path=\"../../typings/index.d.ts\"/>\r\n\r\nimport * as Utility from \"./utility\";\r\n\r\ninterface LocaleData {\r\n    surrogates: { [sourceTag: string]: string };\r\n}\r\n\r\nlet locale: LocaleData;\r\n\r\nexport function initializeAsync() {\r\n    return Utility.getJson(\"data/locale.json\").done(json => { locale = json; });\r\n}\r\n\r\nexport function fallbackLanguageTag(languageTag: string) {\r\n    let index = languageTag.lastIndexOf(\"-\");\r\n    if (index <= 0) return \"\";\r\n    return languageTag.substr(0, index);\r\n}\r\n\r\nexport function getSurrogateLanguage(languageTag: string) {\r\n    return locale.surrogates[languageTag] || null;\r\n}\r\n\r\nexport interface LocaleAware {\r\n    getCurrentLocale(): void;\r\n    setCurrentLocaleAsync(locale: string): void;\r\n}\r\n\r\nexport function LanguageTagEquals(x: string, y: string) {\r\n    return x.toLowerCase() === y.toLowerCase();\r\n}\r\n\r\nexport function FindLanguageTag(x: string, tags: string[]) {\r\n    for (let i = 0; i < tags.length; i++) {\r\n        if (LanguageTagEquals(x, tags[i])) return tags[i];\r\n    }\r\n    return null;\r\n}\r\n"]}